//
// Created by Павло on 05.02.2024.
//

#include <iostream>
using namespace std;


struct Node{
    int value;
    Node* next;
    explicit Node(int value): value(value), next(nullptr){};
};


// add new Node
void pushNode(int value, Node** head){

    // створюю нову ноду
    Node* newNode = new Node(value);


    // задаю некст на елемент який є головою зараз
    newNode->next = *head;

    // робимо новий елемент головою
    *head = newNode;
}


void displayStack(Node* head){
    if(head == nullptr){
        cout << "\nStack is empty\n";
        return;
    };
    Node* currentElement = head;
    cout << "\nValues inside of stack(starting from head): ";
    while (currentElement){
        cout << currentElement->value << ' ';
        currentElement = currentElement->next;
    }
    cout << '\n';
}

void popNode(Node** head){
    if(*head!= nullptr){
        Node* temp = *head;
        *head = (*head)->next;
        delete temp;
        return;
    }
    cout << "Stack is empty\n";
}

int arithmeticAverage(Node* head){
    if(head == nullptr){
        cout << "Stack is empty\n";
        return -1;
    }

    int totalValue = 0;
    int quantityOfItems = 0;
    Node* currentElement = head;
    while (currentElement){

        totalValue+= currentElement->value;
        currentElement = currentElement->next;

        quantityOfItems++;
    }

    return totalValue/quantityOfItems;
}

void freeMemory(Node** head){
    while(*head != nullptr){
        popNode(head);
    }



}


void getElementsFromUser(Node** head){
    int countOfItemsToAdd = 0;
    cout << "Enter quantity of items you want to push into stack:";
    cin >> countOfItemsToAdd;
    for(int i = 0; i < countOfItemsToAdd; i++){
        int value;
        cout << "\nEnter " << i+1 << " item:";
        cin >> value;
        pushNode(value, head);
    }
}

void addTenElements(Node** head){
    for(int i = 0; i<10; i++){
        pushNode(i*10, head);
    }
}



int main(){

    Node* head = nullptr;

    // elements from user
    getElementsFromUser(&head);
    displayStack(head);

    // 10 new elements generated by loop
    addTenElements(&head);
    displayStack(head);

    // arithmeticAverage of stack values
    pushNode(arithmeticAverage(head), &head);
    displayStack(head);

    // remove all elements from stack
    freeMemory(&head);
    displayStack(head);


    return 0;
}