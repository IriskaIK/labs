//
// Created by Павло on 03.02.2024.
//
#include <iostream>
using namespace std;


struct Node{
    int value;
    Node* next;
    explicit Node(int value): value(value), next(nullptr){};
};

struct Stack{
    Node* head;
    int quantityOfItems;


    explicit Stack(): head(nullptr), quantityOfItems(0){};


    void push(int value){
        Node* newNode = new Node(value);
        newNode->next = head;
        head = newNode;
        quantityOfItems++;
    }

    void pop(){
        if(quantityOfItems!=0){
            Node* temp = head;
            head = head->next;
            delete temp;
            quantityOfItems--;
            return;
        }
        cout << "Stack is empty\n";
    }

    void displayStack(){
        if(quantityOfItems == 0){
            cout << "\nStack is empty\n";
            return;
        };
        Node* currentElement = head;
        cout << "\nValues inside of stack(starting from head): ";
        while (currentElement){
            cout << currentElement->value << ' ';
            currentElement = currentElement->next;
        }
        cout << '\n';
    }
    int arithmeticAverage(){
        if(quantityOfItems == 0){
            cout << "Stack is empty\n";
            return -1;
        }

        int totalValue = 0;
        Node* currentElement = head;
        while (currentElement){

            totalValue+= currentElement->value;
            currentElement = currentElement->next;
        }

        return totalValue/quantityOfItems;
    }

    void freeMemory(){
        while(quantityOfItems > 0){
            pop();
        }
    }

};



void getElementsFromUser(Stack &stack){
    int countOfItemsToAdd = 0;
    cout << "Enter quantity of items you want to push into stack:";
    cin >> countOfItemsToAdd;
    for(int i = 0; i < countOfItemsToAdd; i++){
        int value;
        cout << "\nEnter " << i+1 << " item:";
        cin >> value;
        stack.push(value);
    }
}

void addTenElements(Stack &stack){
    for(int i = 0; i<10; i++){
        stack.push(i*10);
    }
}


int main(){

    Stack someStack;

    // elements from user
    getElementsFromUser(someStack);
    someStack.displayStack();

    // 10 new elements generated by loop
    addTenElements(someStack);
    someStack.displayStack();

    // arithmeticAverage of stack values
    int arithmeticAverage = someStack.arithmeticAverage();
    someStack.push(arithmeticAverage);
    someStack.displayStack();

    // remove all elements from stack
    someStack.freeMemory();
    someStack.displayStack();

    return 0;
}